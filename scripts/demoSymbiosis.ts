import { providers, Wallet, utils, constants } from 'ethers'
import { SymbiosisFacet__factory, ERC20__factory } from '../typechain'
import { node_url } from '../utils/network'
import chalk from 'chalk'

const msg = (msg: string) => {
  console.log(chalk.green(msg))
}

const RUBIC_ADDRESS = '0x6c85a9ed880565f30852ebf5f0da97b5e80aa328'
const USDC_ADDRESS = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'
const ZERO_ADDRESS = constants.AddressZero
const destinationChainId = 56

const amountIn = utils.parseUnits('15', 6)
const amountOut = utils.parseUnits('4', 6)

async function main() {
  const jsonProvider = new providers.JsonRpcProvider(node_url('polygon'))
  const provider = new providers.FallbackProvider([jsonProvider])

  let wallet = Wallet.fromMnemonic(<string>process.env.MNEMONIC)
  wallet = wallet.connect(provider)
  const walletAddress = await wallet.getAddress()

  const rubic = SymbiosisFacet__factory.connect(RUBIC_ADDRESS, wallet)

  // Swap and Bridge Non-Native Asset
  {
    const bridgeData = {
      transactionId: utils.randomBytes(32),
      bridge: 'symbiosis',
      integrator: 'Rubic',
      referrer: ZERO_ADDRESS,
      sendingAssetId: USDC_ADDRESS,
      receiver: walletAddress,
      minAmount: amountOut,
      destinationChainId: destinationChainId,
      hasSourceSwaps: true,
      hasDestinationCall: false,
    }

    const symbiosisData = {
      firstSwapCalldata: '0x',
      secondSwapCalldata: '0x',
      intermediateToken: ZERO_ADDRESS,
      bridgingToken: USDC_ADDRESS,
      firstDexRouter: ZERO_ADDRESS,
      secondDexRouter: ZERO_ADDRESS,
      relayRecipient: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',
      otherSideCalldata:
        '0xce654c170000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000e4e1c00000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a80000000000000000000000005523985926aa12ba58dc5ad00ddca99678d7227e000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd000000000000000000000000000000000000000000000000000000000000dbe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000cb28fbe3e9c0fea62e0e63ff3f232cecfe555ad40000000000000000000000000000000000000000000000000000000000000260000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a800000000000000000000000000000000000000000000000000000000000005800000000000000000000000000000000000000000000000000000000000000064000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd73796d62696f7369732d61706900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000059aa2e5f628659918a4890a2a732e6c8bd334e7a0000000000000000000000001a25beb8e75626addb983d46fbdfce5fdc29ae5800000000000000000000000000000000000000000000000000000000000002e41e859a050000000000000000000000000000000000000000000000000000000000e4e1c000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c48f6bdeaa000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000e41e70000000000000000000000000000000000000000000000000ce85e3613ddbddb1000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e000000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006148fd6c649866596c3d8a971fc313e5ece84882000000000000000000000000000000000000000000000000000000000000000200000000000000000000000059aa2e5f628659918a4890a2a732e6c8bd334e7a0000000000000000000000001a25beb8e75626addb983d46fbdfce5fdc29ae58000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a4e691a2aa00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000853a0d2313c0000000000000000000000000000000000000000000000000000cf8e3cd63535490b000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d0000000000000000000000001a25beb8e75626addb983d46fbdfce5fdc29ae5800000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000104000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd0000000000000000000000005aa5f7f84ed0e5db0a4a85c3947ea16b53352fd4000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a8000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd000000000000000000000000000000000000000000000000000000000000003873796d62696f7369732d6170690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a87c0252000000000000000000000000007f9e3430880580713b03670046c7e89a0a91403b00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000051e6d27fa57373d8d4c256231241053a70cb1d93000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd000000000000000000000000000000000000000000000000c73a9c0403f9490b00000000000000000000000000000000000000000000000000a094a482ad742800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0000000000000000000000000000000000000000bf0000a900006d00001a0020d6bdbf78e9e7cea3dedca5984780bafc599bd69add087d5600206ae4071118001e848051e6d27fa57373d8d4c256231241053a70cb1d930000000000000000000000000000000000000000000000000000000000000001e9e7cea3dedca5984780bafc599bd69add087d564101bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254fb6c44bac0bed2854e76f90643097d000000000000000000000000000000000000000000000000c73a9c0403f9490b000000cfee7c0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    }

    // Approve USDC
    const usdc = ERC20__factory.connect(USDC_ADDRESS, wallet)
    const allowance = await usdc.allowance(walletAddress, RUBIC_ADDRESS)
    if (amountIn.gt(allowance)) {
      await usdc.approve(RUBIC_ADDRESS, amountIn)

      msg('Token approved for swapping')
    }

    // Call Rubic smart contract to start the bridge process -- WITH SWAP
    await rubic.startBridgeTokensViaSymbiosis(bridgeData, symbiosisData, {
      gasLimit: 500000,
    })
  }
}

main()
  .then(() => {
    console.error('Success')
    process.exit(0)
  })
  .catch((error) => {
    console.error('error')
    console.error(error)
    process.exit(1)
  })
